{"version":3,"sources":["components/Display.module.css","components/Round.module.css","components/ReloadDataButton.module.css","reportWebVitals.ts","components/ReloadDataButton.tsx","components/Round.tsx","components/Display.tsx","utils/function_helpers.ts","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReloadDataButton","reloadData","title","className","s","wrapper","type","onClick","Round","value","round","wrapperRound","Display","data","useState","arrNumbers","setArrNumbers","inputNumber","setInputNumber","error","setError","mean","reduce","previousValue","currentValue","length","toFixed","median","v","sort","a","b","mid","Math","floor","getMedian","stdDeviation","n","variance","sqrt","getStandardDeviation","mode","numMapping","greatestFreq","forEach","number","getMode","onSubmitHandler","item","trimmedTitle","trim","Number","app","wrapperButton","data1234","data4321","style","marginTop","onChange","e","currentTarget","onKeyPress","key","placeholder","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd00a21a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Display_app__3r5ZI\",\"wrapper\":\"Display_wrapper__1bMcR\",\"wrapperButton\":\"Display_wrapperButton__24FiY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"round\":\"Round_round__2DZ2d\",\"wrapperRound\":\"Round_wrapperRound__2sr5x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ReloadDataButton_wrapper__3eP_z\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FC } from 'react';\n\nimport s from './ReloadDataButton.module.css';\n\nimport { ReturnComponentType } from 'types';\n\ntype ReloadDataButtonType = {\n  title: string;\n  reloadData: () => void;\n};\n\nexport const ReloadDataButton: FC<ReloadDataButtonType> = ({\n  reloadData,\n  title,\n}): ReturnComponentType => (\n  <div className={s.wrapper}>\n    <button type=\"button\" onClick={reloadData}>\n      {title}\n    </button>\n  </div>\n);\n","import { FC } from 'react';\n\nimport s from './Round.module.css';\n\nimport { ReturnComponentType } from 'types';\n\ntype RoundType = {\n  title: string;\n  value: number | string;\n};\n\nexport const Round: FC<RoundType> = ({ value, title }): ReturnComponentType => (\n  <div className={s.round}>\n    <div className={s.wrapperRound}>\n      <span>{title}</span>\n      <div>{value}</div>\n    </div>\n  </div>\n);\n","import { ChangeEvent, KeyboardEvent, FC, useState } from 'react';\n\nimport data1234 from '../data/data-1234.json';\nimport data4321 from '../data/data-4321.json';\n\nimport s from './Display.module.css';\n\nimport { ReloadDataButton } from 'components/ReloadDataButton';\nimport { Round } from 'components/Round';\nimport { ReturnComponentType } from 'types';\nimport {\n  getArithmeticMean,\n  getMedian,\n  getMode,\n  getStandardDeviation,\n} from 'utils/function_helpers';\n\nexport const Display: FC = (): ReturnComponentType => {\n  const ZERO = 0;\n  const [arrNumbers, setArrNumbers] = useState<number[]>([ZERO, ZERO]);\n  const [inputNumber, setInputNumber] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n\n  const mean = getArithmeticMean(arrNumbers);\n  const median = getMedian(arrNumbers);\n  const stdDeviation = getStandardDeviation(arrNumbers);\n  const mode = getMode(arrNumbers);\n\n  const addItem = (item: number): void => {\n    setArrNumbers([...arrNumbers, item]);\n  };\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    const { value } = e.currentTarget;\n    setInputNumber(value);\n  };\n\n  const onSubmitHandler = (): void => {\n    const trimmedTitle = inputNumber.trim();\n    if (trimmedTitle) {\n      addItem(Number(trimmedTitle));\n      setInputNumber('');\n    } else {\n      setError('Please, write your number');\n    }\n  };\n\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.key === 'Enter') {\n      onSubmitHandler();\n    }\n  };\n\n  const json1234Handler = (): void => {\n    setArrNumbers(data1234.data);\n  };\n\n  const json4321Handler = (): void => {\n    setArrNumbers(data4321.data);\n  };\n\n  return (\n    <div className={s.app}>\n      <div className={s.wrapper}>\n        <Round value={mean} title=\"Mean\" />\n        <Round value={median} title=\"Median\" />\n        <Round value={stdDeviation} title=\"Std deviation\" />\n        <Round value={mode} title=\"Mode\" />\n      </div>\n\n      <div className={s.wrapperButton}>\n        <ReloadDataButton reloadData={json1234Handler} title=\"Reload JSON-1234 Data\" />\n        <ReloadDataButton reloadData={json4321Handler} title=\"Reload JSON-4321 Data\" />\n      </div>\n\n      <div style={{ marginTop: '30px' }}>\n        <input\n          onChange={onChangeHandler}\n          value={inputNumber}\n          onKeyPress={onKeyPressAddItem}\n          placeholder=\"Enter a number...\"\n          type=\"number\"\n        />\n        <button type=\"submit\" onClick={onSubmitHandler}>\n          Submit\n        </button>\n        <div style={{ color: 'red' }}>{error}</div>\n      </div>\n    </div>\n  );\n};\n","type DataType = number[];\n\nexport const getArithmeticMean = (data: DataType): string => {\n  const START_VALUE = 0;\n  const FIXED_VALUE = 6;\n\n  return (\n    data.reduce(\n      (previousValue, currentValue) => previousValue + currentValue,\n      START_VALUE,\n    ) / data.length\n  ).toFixed(FIXED_VALUE);\n};\n\nexport const getMedian = (data: DataType): string => {\n  const ZERO = 0;\n  const ONE = 1;\n  const TWO = 2;\n  const FIXED_VALUE = 6;\n\n  const values = [...data];\n  const v = values.sort((a, b) => a - b);\n  const mid = Math.floor(v.length / TWO);\n  return (v.length % TWO !== ZERO ? v[mid] : (v[mid - ONE] + v[mid]) / TWO).toFixed(\n    FIXED_VALUE,\n  );\n};\n\nexport const getStandardDeviation = (data: DataType): string => {\n  const ZERO = 0;\n  const ONE = 1;\n  const TWO = 2;\n  const FIXED_VALUE = 6;\n\n  const mean = data.reduce((s, n) => s + n) / data.length;\n  const variance =\n    data.reduce((s, n) => s + (n - mean) ** TWO, ZERO) / (data.length - ONE);\n  return Math.sqrt(variance).toFixed(FIXED_VALUE);\n};\n\n// export const getMode = (data: DataType): number => {\n//   const ZERO = 0;\n//   const ONE = 1;\n//\n//   const map = new Map();\n//   let maxFreq = 0;\n//   let mode = 0;\n//\n//   for (let i = 0; i < data.length; i + ONE) {\n//     const item = data[i];\n//     let freq = map.has(item) ? map.get(item) : ZERO;\n//     freq = freq + ONE;\n//\n//     if (freq > maxFreq) {\n//       maxFreq = freq;\n//       mode = item;\n//     }\n//\n//     map.set(item, freq);\n//   }\n//\n//   return mode;\n// };\n\nexport const getMode = (data: DataType): number => {\n  const ZERO = 0;\n  const ONE = 1;\n  const numMapping = {};\n  let greatestFreq = 0;\n  let mode = 0;\n  data.forEach(number => {\n    // @ts-ignore\n    numMapping[number] = (numMapping[number] || ZERO) + ONE;\n\n    // @ts-ignore\n    if (greatestFreq < numMapping[number]) {\n      // @ts-ignore\n      greatestFreq = numMapping[number];\n      mode = number;\n    }\n  });\n  return +mode;\n};\n","import { FC } from 'react';\n\nimport { Display } from 'components/Display';\nimport { ReturnComponentType } from 'types';\n\nexport const App: FC = (): ReturnComponentType => <Display />;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport { App } from 'App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}